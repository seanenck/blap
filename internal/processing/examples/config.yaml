# main configuration definition
# directory to use as a store/cache
# can be offset from HOME via '~/' as a prefix
directory: testdata
# include one (or more) files (can use globs)
# these will all be combined into a singular application (map) set
include:
  - "examples/{{ if ne $.Config.Arch \"1\" }}*.more.yaml{{end}}"
  - "examples/other.yaml"
  - "testdata/test.yaml"
# parallelization allows running updates in parallel
# increase > 1 to support parallel jobs (0 == disabled == 1)
parallelization: 0
# configure various connection source components
connections:
  # github settings
  github:
    # set a token (if not using one of the env values)
    # this can be a file path/name which holds the value of the token
    # it can be a file path which is executable (and will be)
    # it can be an array which is a command+args to execute
    token: agithubpersonalaccesstoken
  # timeouts control connections that may need to be timed out
  timeouts:
    # get handles all get request timeouts (0 is default behavior, > 0 is seconds for timeout)
    get: 0
# enable logging for activities
#logfile: "~/.local/state/blap.log"
# to disable do not set or set to empty string
logfile: ""
# a set of regex values can be specified to pin packages (prevent purging)
# one would also have to `disable: true` the application to stop updates
pinned:
  - "{{ if ne $.Config.OS \"fake\" }}nvim{{end}}"
  - "another"
  - "zzzzzzz"
# set configuration-wide environment variables for command steps
variables:
  # these are key (env key) / value (set value) pairs
  - key: "ENV_KEY"
    value: "some values"
  - key: "LDFLAGS"
    value: "-X -y"
# indexing enables using a dryrun/commit strategy of applying updates
indexing:
  # when enabled, dryrun commands will generate an index file
  # that file will be used by follow-on commit actions
  enabled: false
  # in strict mode it will not be possible to perform a commit
  # if an index file does not exist
  strict: false
# application settings for deployment
applications:
  nvim:
    # priority can be used to make sure packages are run in a specific order
    # higher priority goes FIRST
    priority: -100
    # github project
    github:
      # actual github project
      project: "neovim/neovim"
      # select the necessary asset
      release:
        asset: "nvim-linux64.tar.gz$"
    commands:
      # deploy the appropriate files
      steps:
        - command: ["ln", "-sf", "bin/nvim", "~/bin"]
  blap:
    # github release mode
    github:
      project: "seanenck/blap"
      release:
        # instead of selecting a _binary_ asset, get the tarball of a release
        # can perform a source build
        asset: "tarball"
    commands:
      # setup build environment settings for ALL application build steps
      environment:
        # clear environment before each step
        clear: true
        # set environment valuues
        variables:
          - key: "GOOS"
            value: "linux"
          - key: "GOARCH"
            value: "arm64"
      # run specific commands
      steps:
        - command: ["make", "VERSION={{ $.Vars.Tag }}"]
          environment:
            # set values specifically for this step
            # can also set clear ON at this level
            variables:
              - key: "GOOS"
                value: "1"
              - key: "X"
                value: "1"
        # deploy the built files
        - command: ["ln", "-sf", "target/blap", "~/.local/bin"]
  nvim2:
    # this app, specifically, is disabled
    disable: true
    github:
      project: "neovim/neovim"
      release:
        asset: "nvim-linux64.tar.gz$"
    commands:
      steps:
        - command: ["ln", "-sf", "bin/nvim", "~/bin"]
