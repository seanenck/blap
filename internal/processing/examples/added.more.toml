pinned = [
  "another2"
]
# along with more applications
[applications.go.git]
# git mode
# any git repository that 'git' can reach
repository = "https://github.com/golang/go"
# work in tagged mode (use tags to determine releases)
# provide a URL link for downloading (will use repository/upstream if not provided)
# can use detected version (tag), GOOS and GOARCH (and application name from the map level) in template
tagged.download = "https://go.dev/dl/{{ $.Vars.Tag }}.{{ $.OS }}-{{ $.Arch }}.tar.gz"
# define regex filters to _filter out_ tags that are noise/not interesting
tagged.filters = [
  "refs/tags/weekly",
  "refs/tags/release",
  "[0-9]rc[0-9]",
]
[[applications.go.commands.steps]]
# run some commands upon source download/extraction
command = ["ln", "-sf", "bin/go", "~/bin"]

[applications.rg.github]
# github mode
# provide the project on github
project = "BurntSushi/ripgrep"
# release mode (uses github releases to detect version)
# need to select the asset, can use $.Arch/$.OS (tag and name) to find the asset
# only one asset can match
release = { asset = '{{ if eq $.Arch "amd64" }}x86_64{{ end }}-unknown-{{ $.OS }}-(.+?).tar.gz$' }
[[applications.rg.commands.steps]]
# again, deploy files appropriately
command = ["ln", "-sf", "rg", "~/bin"]
