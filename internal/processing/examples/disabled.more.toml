# included file, define applications
# this _whole file_ is disable BUT allows generic includes without opting files in/out
# given that this file is duplicative of others, it is best it is disabled (apps can't be duplicated)
disable = true
pinned = [
  "123"
]

[applications.go.git]
repository = "https://github.com/golang/go"
[applications.go.git.tagged]
download = "https://go.dev/dl/{{ $.Vars.Tag }}.linux-amd64.tar.gz"
filters = [
  "refs/tags/weekly",
  "refs/tags/release",
  "[0-9]rc[0-9]",
]

[applications.rg.github]
project = "BurntSushi/ripgrep"
release = { asset = "x86_64-unknown-linux-(.+?).tar.gz$" }
[applications.rg.extract]
# extraction can be skipped
skip = true

# applications can do web scraping
[applications.bash.web]
# given a url
url = "https://ftp.gnu.org/gnu/bash/"
# one (or more) regex filters to try and find versions
scrape.filters = [
    "<td><a href=\"bash-([0-9.]*?).tar.gz"
]
# scrape.download can be supplied, much like git tag downloads, to pull from if the url is different
scrape.download = "https://ftp.gnu.org/gnu/bash/{{ $.Vars.Tag }}"
# if the scrape result is semver and should be sorted as such (and prefixed with 'v' as needed),
# by default it is assumed the pulled source, using the internal processing rules, will
# result in the preferred version being the 'first' entry
# the other options (beyond empty string = default) are:
# - 'semver' =  prefix with 'v' and do a semver based sort
# - 'rsemver' = same as ^ but reverse entry order after sort
# - 'sort' = do a string-based sort
# - 'rsort' = same as ^ but reverse entry order after sort
# the first element will always be chosen from the list
scrape.sort = "semver"
